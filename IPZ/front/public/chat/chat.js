const token = localStorage.getItem('token');

if (!token) {
    alert("Brak tokena. Zaloguj siƒô najpierw.");
    throw new Error("Brak tokena ‚Äì przerwano dzia≈Çanie chat.js");
}

const socket = io('http://localhost:5000', { auth: { token } });

const recipientSelect = document.getElementById('recipient');
const messagesDiv = document.getElementById('messages');
const input = document.getElementById('input');
const userListSidebar = document.getElementById('userList');

let currentRecipient = null;

// –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
function getUserIdFromToken() {
    try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        return payload.userId;
    } catch (e) {
        console.error("Nieprawid≈Çowy token JWT.");
        alert("Nieprawid≈Çowy token. Zaloguj siƒô ponownie.");
        throw e;
    }
}

const myId = getUserIdFromToken();

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–ª–Ω—É—é –æ–ø–ª–∞—Ç—É)
fetch("http://localhost:5000/api/users/getInfoForMe", {
    headers: { Authorization: `Bearer ${token}` }
})
    .then(resp => {
        if (!resp.ok) throw new Error("Nie uda≈Ço siƒô pobraƒá danych u≈ºytkownika");
        return resp.json();
    })
    .then(user => {
        const baseCoursePrice = parseFloat(user.course?.price || 0);
        const premiumCost = user.premium ? 2000 : 0;
        const total = baseCoursePrice + premiumCost;
        const paid = parseFloat(user.paid || 0);
        user.hasFullPremiumAccess = user.premium && paid >= total;

        localStorage.setItem("user", JSON.stringify(user));

        // üëá –î–û–ë–ê–í–¨ –≠–¢–û –ó–î–ï–°–¨
        fetch('http://localhost:5000/api/users', {
            headers: { Authorization: `Bearer ${token}` }
        })
            .then(res => res.json())
            .then(users => {
                displayUsersInSidebar(users);
                populateRecipientSelect(users);
            })
            .catch(err => console.error("B≈ÇƒÖd ≈Çadowania u≈ºytkownik√≥w:", err));
    })
    .catch(err => {
        console.error("B≈ÇƒÖd przy ≈Çadowaniu danych u≈ºytkownika:", err);
        alert("B≈ÇƒÖd u≈ºytkownika. Zaloguj siƒô ponownie.");
    });

// –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
function populateRecipientSelect(users) {
    recipientSelect.innerHTML = '<option value="">--</option>';
    const currentUser = JSON.parse(localStorage.getItem("user"));

    users.forEach(user => {
        if (user._id === myId) return;

        // üîê –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å premium-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
        if (
            user.premium === true &&
            user.role === 'instructor' &&
            !currentUser?.hasFullPremiumAccess
        ) return;
        const opt = document.createElement('option');
        opt.value = user._id;
        opt.textContent = `${user.name} ${user.surname}`;
        recipientSelect.appendChild(opt);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∞–π–¥–±–∞—Ä–µ
function displayUsersInSidebar(users) {
    userListSidebar.innerHTML = '';
    const currentUser = JSON.parse(localStorage.getItem("user"));

    users.forEach(user => {
        if (user._id === myId) return;

        // üîê –°–∫—Ä—ã—Ç—å –ø—Ä–µ–º–∏—É–º-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –æ—Ç –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
        if (
            user.premium === true &&
            user.role === 'instructor' &&
            !currentUser?.hasFullPremiumAccess
        ) return;

        const userDiv = document.createElement('div');
        userDiv.classList.add('user');
        userDiv.onclick = () => {
            document.querySelectorAll('.user').forEach(el => el.classList.remove('active'));
            userDiv.classList.add('active');
            recipientSelect.value = user._id;
            currentRecipient = user._id;
            fetchMessagesForPrivateChat();
        };

        // ‚≠ê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤—ë–∑–¥–æ—á–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–º–∏—É–º
        const isPremium = user.fullyPaidPremium === true;
        const roleLabel = user.role === 'student' ? 'Student' : 'Instruktor';

        userDiv.innerHTML = `
        <img src="http://localhost:5000${user.avatarUrl || '/front/images/ultradefolt.png'}" alt="Avatar">
        <div class="info">
          <strong>${user.name} ${user.surname}${isPremium ? ' ‚≠ê' : ''}</strong>
          <span class="status role">${roleLabel}</span>
        </div>
        `;

        userListSidebar.appendChild(userDiv);
    });
}


// –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
recipientSelect.addEventListener('change', () => {
    currentRecipient = recipientSelect.value;
    messagesDiv.innerHTML = '';
    if (currentRecipient) fetchMessagesForPrivateChat();
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
function fetchMessagesForPrivateChat() {
    fetch(`http://localhost:5000/api/messages/private/${currentRecipient}`, {
        headers: { Authorization: `Bearer ${token}` }
    })
        .then(res => res.json())
        .then(displayMessages)
        .catch(err => console.error('B≈ÇƒÖd wiadomo≈õci prywatnych:', err));
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
function displayMessages(messages) {
    if (!Array.isArray(messages)) return;

    messagesDiv.innerHTML = '';
    const currentUser = JSON.parse(localStorage.getItem("user"));
    const isPremium = currentUser?.hasFullPremiumAccess;

    messages.forEach(msg => {
        const sender = msg.sender === myId ? 'Ty' : msg.name;

        // –û–±—ë—Ä—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è + –∫–Ω–æ–ø–∫–∏
        const wrapper = document.createElement('div');
        wrapper.classList.add('message-wrapper');

        // –°–æ–æ–±—â–µ–Ω–∏–µ
        const messageElement = document.createElement('p');
        messageElement.dataset.messageId = msg._id;
        messageElement.innerHTML = `<strong>${sender}:</strong> ${msg.content}`;
        messageElement.classList.add('message-content');

        wrapper.appendChild(messageElement);

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        if (msg.sender === myId && isPremium) {
            const deleteBtn = document.createElement('button');
            deleteBtn.innerHTML = 'üóë';
            deleteBtn.classList.add('delete-btn');
            deleteBtn.title = 'Usu≈Ñ wiadomo≈õƒá';

            deleteBtn.onclick = () => {
                if (confirm("Na pewno usunƒÖƒá wiadomo≈õƒá?")) {
                    deleteMessage(msg._id);
                }
            };

            wrapper.appendChild(deleteBtn);
        }

        messagesDiv.appendChild(wrapper);
    });

    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}





// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage() {
    const content = input.value.trim();
    if (!content || !currentRecipient) return;

    const data = {
        recipient: currentRecipient,
        content
    };

    socket.emit('message', data);
    input.value = '';
}
// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
input.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        sendMessage();
    }
});
function deleteMessage(messageId) {
    fetch(`http://localhost:5000/api/messages/${messageId}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` }
    })
        .then(res => {
            if (res.ok) {
                fetchMessagesForPrivateChat(); // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            } else {
                alert("Nie uda≈Ço siƒô usunƒÖƒá wiadomo≈õci.");
            }
        })
        .catch(err => console.error("B≈ÇƒÖd usuwania wiadomo≈õci:", err));
}



socket.on('message', (msg) => {
    const isPrivate = (msg.sender === myId && msg.recipient === currentRecipient) ||
        (msg.sender === currentRecipient && msg.recipient === myId);

    if (!isPrivate) return;

    const sender = msg.sender === myId ? 'Ty' : msg.name;
    const messageElement = document.createElement('p');
    messageElement.dataset.messageId = msg._id;
    messageElement.innerHTML = `<strong>${sender}:</strong> ${msg.content}`;

    const currentUser = JSON.parse(localStorage.getItem("user"));
    const isPremium = currentUser?.hasFullPremiumAccess;


    if (msg.sender === myId && isPremium) {
        const deleteBtn = document.createElement('button');
        deleteBtn.innerHTML = 'üóë';
        deleteBtn.classList.add('delete-btn');
        deleteBtn.title = 'Usu≈Ñ wiadomo≈õƒá';

        deleteBtn.onclick = () => {
            if (confirm("Na pewno usunƒÖƒá wiadomo≈õƒá?")) {
                deleteMessage(msg._id);
            }
        };

        messageElement.appendChild(deleteBtn);
    }

    messagesDiv.appendChild(messageElement);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
});
