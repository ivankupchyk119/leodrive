const express = require('express');
const mongoose = require('mongoose');
require('dotenv').config();
const session = require('express-session');
const MongoStore = require('connect-mongo');
const cors = require('cors');
const path = require('path');
const nodemailer = require('nodemailer'); // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const jwt = require('jsonwebtoken');
const Group = require('./models/Group');

const webpush = require('web-push');
const cron = require('node-cron');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
mongoose
  .connect(process.env.MONGO_URI || 'mongodb+srv://noname52:oralcumshot@cluster0.zohi8.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log('Po≈ÇƒÖczono z MongoDB'))
  .catch((err) => console.error('B≈ÇƒÖd po≈ÇƒÖczenia z MongoDB:', err));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors({
  origin: '*', // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  credentials: true,
}));

// Middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
const mongoStore = MongoStore.create({
  mongoUrl: process.env.MONGO_URI || 'mongodb+srv://noname52:oralcumshot@cluster0.zohi8.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0',
});
app.use(
  session({
    secret: process.env.SECRET || 'aboba',
    resave: false,
    saveUninitialized: false,
    store: mongoStore,
    cookie: {
      secure: process.env.NODE_ENV === 'production', // –í–∫–ª—é—á–∏—Ç–µ secure —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      httpOnly: true, // –ö—É–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã JavaScript
      maxAge: 24 * 60 * 60 * 1000, // 1 –¥–µ–Ω—å
    },
  })
);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS)
app.use('/front/public', express.static(path.join(__dirname, '..', 'front', 'public')));

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use('/front/images', express.static(path.join(__dirname, '..', 'front', 'images')));



app.get('/', (req, res) => {
  res.redirect('/front/public/Strona Glowna/main.html');
});



// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const userRoutes = require('./routes/userRoutes');
const scheduleRoutes = require('./routes/scheduleRoutes');
const ratingRoutes = require('./routes/ratingRoutes');
const authRoutes = require('./routes/auth'); // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
const testResultRoutes = require('./routes/testresultRoutes');
const coursesRoutes = require('./routes/CourseRouter');
const reviewsRoutes = require('./routes/reviewsRouter');
const notificationRoutes = require('./routes/notificationRoutes');
const materialRoutes = require('./routes/materialRoutes');
const groupRoutes = require('./routes/groupRoutes');
const premiumRoutes = require('./routes/premiumRoutes');


// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/users', userRoutes);
app.use('/api/schedules', scheduleRoutes);
app.use('/api/ratings', ratingRoutes);
app.use('/api/auth', authRoutes); // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.use('/api/testResults', testResultRoutes);
app.use('/api/courses', coursesRoutes);
app.use('/api/reviews', reviewsRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/materials', materialRoutes);
app.use('/api/groups', groupRoutes);
app.use('/api/premium', premiumRoutes);



// --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è ---
app.post('/api/auth/forgot-password', async (req, res) => {
  const { email } = req.body;
  if (!email) {
    return res.status(400).json({ message: 'Wymagany jest adres e-mail' });
  }

  try {
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await mongoose.connection.collection('users').findOne({ email });

    if (!user) {
      return res.status(404).json({ message: 'U≈ºytkownik nie zosta≈Ç znaleziony' });
    }

    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Nodemailer
    const transporter = nodemailer.createTransport({
      service: 'Gmail', // Use Gmail as email service
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      },
      debug: true, // Enable debugging for the email sending process
      logger: true, // Enable logging for the email sending process
    });


    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: 'Password Reminder',
      text: `Hello, your password is: ${user.password}`,
    };



    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å email
    await transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('B≈ÇƒÖd podczas wysy≈Çania e-maila:', error);
        return res.status(500).json({ message: 'B≈ÇƒÖd podczas wysy≈Çania e-maila z has≈Çem', error: error.message });
      } else {
        console.log('Wiadomo≈õƒá wys≈Çana:', info.response);
        return res.json({ message: 'E-mail z has≈Çem zosta≈Ç wys≈Çany pomy≈õlnie' });
      }
    });
  } catch (error) {
    console.error('B≈ÇƒÖd w trasie zapomniane has≈Ço:', error);
    res.status(500).json({ message: 'B≈ÇƒÖd podczas wysy≈Çania e-maila z has≈Çem' });
  }
});
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user', (req, res) => {
  const token = req.headers['authorization']?.split(' ')[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞

  if (!token) {
    return res.status(401).json({ message: 'Token jest nieobecny' });
  }

  jwt.verify(token, process.env.SECRET || 'aboba', (err, decoded) => {
    if (err) {
      console.error('B≈ÇƒÖd weryfikacji tokena:', err.message);
      return res.status(401).json({ message: 'Nieprawid≈Çowy lub wygas≈Çy token' });
    }

    res.json({
      userId: decoded.userId,
      firstName: decoded.name,
      lastName: decoded.surname,
      role: decoded.role,
    });
  });
});

// API endpoint to save test result
app.post('/api/testResult', (req, res) => {
  const { userId, result, category } = req.body;  // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π

  if (!userId || result === undefined || !category) {
    return res.status(400).json({ success: false, message: 'Nieprawid≈Çowe dane' });
  }

  const newTestResult = new TestResult({
    user: userId,   // –°—Å—ã–ª–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result,         // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    category,       // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–∞
  });

  newTestResult.save()
    .then(() => {
      res.json({ success: true, message: 'Wynik testu zapisany' });
    })
    .catch(error => {
      res.status(500).json({ success: false, message: 'B≈ÇƒÖd serwera' });
    });
});

app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

const Schedule = require('./models/Schedule');
const User = require('./models/User');

webpush.setVapidDetails(
  'mailto:test@example.com',
  process.env.VAPID_PUBLIC_KEY,
  process.env.VAPID_PRIVATE_KEY
);

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ –±–æ—é ‚Äî –ª—É—á—à–µ MongoDB)
const subscriptions = {};

app.post('/api/subscribe', (req, res) => {
  const { userId, subscription } = req.body;

  if (!userId || !subscription) {
    return res.status(400).json({ message: 'Missing subscription data' });
  }

  subscriptions[userId] = subscription;
  res.status(201).json({ message: 'Subscribed successfully' });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ Date –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
function getLessonStartDate(lesson) {
  const date = new Date(lesson.date);
  const [hours, minutes] = lesson.startTime.split(':').map(Number);
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ (—Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞)
  date.setHours(hours, minutes, 0, 0);
  return date;
}

cron.schedule('*/1 * * * *', async () => {
  console.log('‚è∞ Cron job –∑–∞–ø—É—â–µ–Ω');
  const now = new Date(); // –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
  const inFiveMinutes = new Date(now.getTime() + 5 * 60000);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "scheduled"
    const todayStart = new Date(now);
    todayStart.setHours(0, 0, 0, 0);

    const todayEnd = new Date(now);
    todayEnd.setHours(23, 59, 59, 999);

    const lessons = await Schedule.find({
      date: { $gte: todayStart, $lte: todayEnd },
      status: 'scheduled'
    });

    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: ${lessons.length}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ now - inFiveMinutes (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
    const upcomingLessons = lessons.filter(lesson => {
      const lessonStart = getLessonStartDate(lesson);

      console.log(`lessonStart: ${lessonStart.toISOString()}, now: ${now.toISOString()}, inFiveMinutes: ${inFiveMinutes.toISOString()}`);

      return lessonStart >= now && lessonStart <= inFiveMinutes;
    });

    console.log('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–µ—Ä–≤–µ—Ä–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö):', new Date().getTimezoneOffset());

    console.log(`üìÜ –ó–∞–Ω—è—Ç–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç: ${upcomingLessons.length}`);
    upcomingLessons.forEach(lesson => {
      console.log(`üîî –ó–∞–Ω—è—Ç–∏–µ –≤ ${lesson.startTime}, –¥–∞—Ç–∞: ${lesson.date.toISOString()}`);
    });

    for (const lesson of upcomingLessons) {
      const user = await User.findById(lesson.student);
      if (!user) continue;

      const subscription = subscriptions[user._id];
      if (!subscription) continue;

      console.log(`üì® –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}`);

      const payload = JSON.stringify({
        title: 'Przypomnienie o lekcji',
        body: `Twoje zajƒôcia zacznƒÖ siƒô o ${lesson.startTime} typu "${lesson.type}".`
      });

      await webpush.sendNotification(subscription, payload);
      console.log(`‚úÖ Push wys≈Çany –¥–æ ${user.email}`);
    }
  } catch (err) {
    console.error('‚ùå –ë≈ÇƒÖ–¥ –≤ cron —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö:', err);
  }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Co≈õ posz≈Ço nie tak!');
});

// ‚úÖ –£–¥–∞–ª—è–µ–º app.listen(...) ‚Äî –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

// ‚úÖ –°–æ–∑–¥–∞—ë–º HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –±–∞–∑–µ Express
const http = require('http');
const server = http.createServer(app);

// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ socket.io
const { Server } = require('socket.io');
const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST']
  }
});

const Message = require('./models/Message');

// ‚úÖ JWT middleware –¥–ª—è socket.io
io.use(async (socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) return next(new Error('Unauthorized'));

  try {
    const decoded = jwt.verify(token, process.env.SECRET || 'aboba');
    socket.user = decoded;

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–∞–º: –ª–∏—á–Ω–∞—è –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ
    socket.join(decoded.userId); // –õ–∏—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
    const groups = await Group.find({ members: decoded.userId });
    groups.forEach(group => {
      socket.join(group._id.toString()); // –ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    });

    next();
  } catch (err) {
    next(new Error('Invalid token'));
  }
});

io.on('connection', (socket) => {
  console.log('User connected:', socket.user.name);

  socket.on('message', async (data) => {
    const message = new Message({
      sender: socket.user.userId,
      content: data.content,
      room: data.recipient ? null : data.room,
      recipient: data.recipient || null,
      name: socket.user.name,
      surname: socket.user.surname,
    });

    await message.save();

    if (data.recipient) {
      // –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      io.to(data.recipient).emit('message', message);
      io.to(socket.user.userId).emit('message', message);
    } else if (data.room) {
      // –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      io.to(data.room).emit('message', message);
    }
  });
});

app.get('/api/messages/group/:groupId', async (req, res) => {
  const token = req.headers['authorization']?.split(' ')[1]; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  if (!token) return res.status(401).json({ message: 'Unauthorized' }); // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const decoded = jwt.verify(token, process.env.SECRET || 'aboba');
    const userId = decoded.userId;
    const groupId = req.params.groupId;

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ –ø–æ–ª—é room (–≥—Ä—É–ø–ø–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ room)
    const messages = await Message.find({
      room: groupId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ room –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥—Ä—É–ø–ø–µ
      recipient: null  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (recipient == null)
    })
      .sort({ createdAt: 1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
      .limit(100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    res.json(messages);
  } catch (err) {
    console.error('B≈ÇƒÖd przy otrzymaniu powiadomie≈Ñ:', err); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    res.status(403).json({ message: 'Invalid token' }); // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 403
  }
});




app.get('/api/messages/private/:userId', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ error: 'Unauthorized' });

    const decoded = jwt.verify(token, process.env.SECRET || 'aboba');
    const currentUserId = decoded.userId;
    const otherUserId = req.params.userId;

    const messages = await Message.find({
      $or: [
        { sender: currentUserId, recipient: otherUserId },
        { sender: otherUserId, recipient: currentUserId }
      ]
    }).sort({ createdAt: 1 });

    res.json(messages);
  } catch (err) {
    res.status(401).json({ error: 'Invalid token' });
  }
});

//–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
app.delete('/api/messages/:id', async (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Unauthorized' });

  try {
    const decoded = jwt.verify(token, process.env.SECRET || 'aboba');

    const message = await Message.findById(req.params.id);
    if (!message) return res.status(404).json({ error: 'Message not found' });

    if (message.sender.toString() !== decoded.userId) {
      return res.status(403).json({ error: 'Forbidden' });
    }

    await Message.findByIdAndDelete(req.params.id);

    res.json({ success: true, message: 'Message deleted' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});




// ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω!
server.listen(PORT, () => {
  console.log(`Server dzia≈Ça na porcie ${PORT}`);
});


