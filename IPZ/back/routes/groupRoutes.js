const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const Group = require('../models/Group');

// Middleware –¥–ª—è auth
function auth(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Unauthorized' });

  try {
    const decoded = jwt.verify(token, process.env.SECRET || 'aboba');
    req.user = decoded;
    next();
  } catch (err) {
    res.status(403).json({ error: 'Invalid token' });
  }
}

// üîß –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
router.post('/', auth, async (req, res) => {
  const { name, members = [] } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–º—è –≥—Ä—É–ø–ø—ã –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç—ã–º
  if (!name || name.trim() === '') {
    return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  try {
    // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const group = new Group({
      name,
      members: [...new Set([...members, req.user.userId])], // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      createdBy: req.user.userId,
    });

    await group.save();
    res.status(201).json(group);
  } catch (err) {
    console.error(err); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã' });
  }
});

// üì¶ –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
router.get('/', auth, async (req, res) => {
  try {
    const groups = await Group.find({ members: req.user.userId });
    res.json(groups);
  } catch (err) {
    console.error(err); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø' });
  }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
router.post('/:groupId/add', auth, async (req, res) => {
  const { userId } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å userId
  if (!userId) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }

  try {
    const group = await Group.findById(req.params.groupId);
    if (!group) return res.status(404).json({ error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
    if (!group.members.includes(req.user.userId)) {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if (!group.members.includes(userId)) {
      group.members.push(userId);
      await group.save();
    }

    res.json(group);
  } catch (err) {
    console.error(err); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

module.exports = router;
